// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`

class PropagationDetailSummary {
  final PlatformInt64 eventTimestamp;
  final String sourceNodeText;
  final String targetNodeText;
  final double energyChange;
  final String? path;
  final String? reason;

  const PropagationDetailSummary({
    required this.eventTimestamp,
    required this.sourceNodeText,
    required this.targetNodeText,
    required this.energyChange,
    this.path,
    this.reason,
  });

  @override
  int get hashCode =>
      eventTimestamp.hashCode ^
      sourceNodeText.hashCode ^
      targetNodeText.hashCode ^
      energyChange.hashCode ^
      path.hashCode ^
      reason.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PropagationDetailSummary &&
          runtimeType == other.runtimeType &&
          eventTimestamp == other.eventTimestamp &&
          sourceNodeText == other.sourceNodeText &&
          targetNodeText == other.targetNodeText &&
          energyChange == other.energyChange &&
          path == other.path &&
          reason == other.reason;
}

class PropagationFilter {
  final PlatformInt64? startTimeSecs;
  final PlatformInt64? endTimeSecs;
  final int limit;

  const PropagationFilter({
    this.startTimeSecs,
    this.endTimeSecs,
    required this.limit,
  });

  @override
  int get hashCode =>
      startTimeSecs.hashCode ^ endTimeSecs.hashCode ^ limit.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PropagationFilter &&
          runtimeType == other.runtimeType &&
          startTimeSecs == other.startTimeSecs &&
          endTimeSecs == other.endTimeSecs &&
          limit == other.limit;
}

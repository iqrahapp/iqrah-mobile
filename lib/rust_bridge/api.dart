// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'exercises.dart';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'repository.dart';

/// One-time setup: initializes DB, imports graph, and syncs the default user.
/// Should be called on first app launch.
Future<String> setupDatabase({String? dbPath, required List<int> kgBytes}) =>
    RustLib.instance.api.crateApiSetupDatabase(
      dbPath: dbPath,
      kgBytes: kgBytes,
    );

Future<String> setupDatabaseInMemory({required List<int> kgBytes}) =>
    RustLib.instance.api.crateApiSetupDatabaseInMemory(kgBytes: kgBytes);

Future<List<Exercise>> getExercises({
  required String userId,
  required int limit,
}) => RustLib.instance.api.crateApiGetExercises(userId: userId, limit: limit);

Future<MemoryState> processReview({
  required String userId,
  required String nodeId,
  required ReviewGrade grade,
}) => RustLib.instance.api.crateApiProcessReview(
  userId: userId,
  nodeId: nodeId,
  grade: grade,
);

Future<DebugStats> getDebugStats({required String userId}) =>
    RustLib.instance.api.crateApiGetDebugStats(userId: userId);

Future<String> reseedDatabase() =>
    RustLib.instance.api.crateApiReseedDatabase();

Future<String> refreshPriorityScores({required String userId}) =>
    RustLib.instance.api.crateApiRefreshPriorityScores(userId: userId);

Future<List<ItemPreview>> getSessionPreview({
  required String userId,
  required int limit,
}) => RustLib.instance.api.crateApiGetSessionPreview(
  userId: userId,
  limit: limit,
);

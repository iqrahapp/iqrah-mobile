// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'cbor_import.dart';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

class DebugStats {
  final int dueToday;
  final int totalReviewed;
  final double avgEnergy;
  final List<DueItem> nextDueItems;
  final BigInt totalNodesCount;
  final BigInt totalEdgesCount;

  const DebugStats({
    required this.dueToday,
    required this.totalReviewed,
    required this.avgEnergy,
    required this.nextDueItems,
    required this.totalNodesCount,
    required this.totalEdgesCount,
  });

  @override
  int get hashCode =>
      dueToday.hashCode ^
      totalReviewed.hashCode ^
      avgEnergy.hashCode ^
      nextDueItems.hashCode ^
      totalNodesCount.hashCode ^
      totalEdgesCount.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DebugStats &&
          runtimeType == other.runtimeType &&
          dueToday == other.dueToday &&
          totalReviewed == other.totalReviewed &&
          avgEnergy == other.avgEnergy &&
          nextDueItems == other.nextDueItems &&
          totalNodesCount == other.totalNodesCount &&
          totalEdgesCount == other.totalEdgesCount;
}

class DueItem {
  final String nodeId;
  final String? arabic;
  final MemoryState state;

  const DueItem({required this.nodeId, this.arabic, required this.state});

  @override
  int get hashCode => nodeId.hashCode ^ arabic.hashCode ^ state.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DueItem &&
          runtimeType == other.runtimeType &&
          nodeId == other.nodeId &&
          arabic == other.arabic &&
          state == other.state;
}

class ItemPreview {
  final String nodeId;
  final String? arabic;
  final String? translation;
  final double priorityScore;
  final ScoreBreakdown scoreBreakdown;
  final MemoryState memoryState;

  const ItemPreview({
    required this.nodeId,
    this.arabic,
    this.translation,
    required this.priorityScore,
    required this.scoreBreakdown,
    required this.memoryState,
  });

  @override
  int get hashCode =>
      nodeId.hashCode ^
      arabic.hashCode ^
      translation.hashCode ^
      priorityScore.hashCode ^
      scoreBreakdown.hashCode ^
      memoryState.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ItemPreview &&
          runtimeType == other.runtimeType &&
          nodeId == other.nodeId &&
          arabic == other.arabic &&
          translation == other.translation &&
          priorityScore == other.priorityScore &&
          scoreBreakdown == other.scoreBreakdown &&
          memoryState == other.memoryState;
}

class MemoryState {
  final double stability;
  final double difficulty;
  final double energy;
  final PlatformInt64 lastReviewed;
  final PlatformInt64 dueAt;
  final int reviewCount;

  const MemoryState({
    required this.stability,
    required this.difficulty,
    required this.energy,
    required this.lastReviewed,
    required this.dueAt,
    required this.reviewCount,
  });

  @override
  int get hashCode =>
      stability.hashCode ^
      difficulty.hashCode ^
      energy.hashCode ^
      lastReviewed.hashCode ^
      dueAt.hashCode ^
      reviewCount.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MemoryState &&
          runtimeType == other.runtimeType &&
          stability == other.stability &&
          difficulty == other.difficulty &&
          energy == other.energy &&
          lastReviewed == other.lastReviewed &&
          dueAt == other.dueAt &&
          reviewCount == other.reviewCount;
}

class NodeData {
  final String id;
  final NodeType nodeType;
  final Map<String, String> metadata;

  const NodeData({
    required this.id,
    required this.nodeType,
    required this.metadata,
  });

  @override
  int get hashCode => id.hashCode ^ nodeType.hashCode ^ metadata.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NodeData &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          nodeType == other.nodeType &&
          metadata == other.metadata;
}

enum ReviewGrade { again, hard, good, easy }

class ScoreBreakdown {
  final double daysOverdue;
  final double masteryGap;
  final double importance;
  final ScoreWeights weights;

  const ScoreBreakdown({
    required this.daysOverdue,
    required this.masteryGap,
    required this.importance,
    required this.weights,
  });

  @override
  int get hashCode =>
      daysOverdue.hashCode ^
      masteryGap.hashCode ^
      importance.hashCode ^
      weights.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ScoreBreakdown &&
          runtimeType == other.runtimeType &&
          daysOverdue == other.daysOverdue &&
          masteryGap == other.masteryGap &&
          importance == other.importance &&
          weights == other.weights;
}

class ScoreWeights {
  final double wDue;
  final double wNeed;
  final double wYield;

  const ScoreWeights({
    required this.wDue,
    required this.wNeed,
    required this.wYield,
  });

  @override
  int get hashCode => wDue.hashCode ^ wNeed.hashCode ^ wYield.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ScoreWeights &&
          runtimeType == other.runtimeType &&
          wDue == other.wDue &&
          wNeed == other.wNeed &&
          wYield == other.wYield;
}

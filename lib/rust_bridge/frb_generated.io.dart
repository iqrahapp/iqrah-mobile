// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'exercises.dart';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';
import 'repository.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  DebugStats dco_decode_debug_stats(dynamic raw);

  @protected
  DueItem dco_decode_due_item(dynamic raw);

  @protected
  Exercise dco_decode_exercise(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  ItemPreview dco_decode_item_preview(dynamic raw);

  @protected
  List<DueItem> dco_decode_list_due_item(dynamic raw);

  @protected
  List<Exercise> dco_decode_list_exercise(dynamic raw);

  @protected
  List<ItemPreview> dco_decode_list_item_preview(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  MemoryState dco_decode_memory_state(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  ReviewGrade dco_decode_review_grade(dynamic raw);

  @protected
  ScoreBreakdown dco_decode_score_breakdown(dynamic raw);

  @protected
  ScoreWeights dco_decode_score_weights(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  DebugStats sse_decode_debug_stats(SseDeserializer deserializer);

  @protected
  DueItem sse_decode_due_item(SseDeserializer deserializer);

  @protected
  Exercise sse_decode_exercise(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  ItemPreview sse_decode_item_preview(SseDeserializer deserializer);

  @protected
  List<DueItem> sse_decode_list_due_item(SseDeserializer deserializer);

  @protected
  List<Exercise> sse_decode_list_exercise(SseDeserializer deserializer);

  @protected
  List<ItemPreview> sse_decode_list_item_preview(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  MemoryState sse_decode_memory_state(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  ReviewGrade sse_decode_review_grade(SseDeserializer deserializer);

  @protected
  ScoreBreakdown sse_decode_score_breakdown(SseDeserializer deserializer);

  @protected
  ScoreWeights sse_decode_score_weights(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_debug_stats(DebugStats self, SseSerializer serializer);

  @protected
  void sse_encode_due_item(DueItem self, SseSerializer serializer);

  @protected
  void sse_encode_exercise(Exercise self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_item_preview(ItemPreview self, SseSerializer serializer);

  @protected
  void sse_encode_list_due_item(List<DueItem> self, SseSerializer serializer);

  @protected
  void sse_encode_list_exercise(List<Exercise> self, SseSerializer serializer);

  @protected
  void sse_encode_list_item_preview(
    List<ItemPreview> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_memory_state(MemoryState self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_review_grade(ReviewGrade self, SseSerializer serializer);

  @protected
  void sse_encode_score_breakdown(
    ScoreBreakdown self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_score_weights(ScoreWeights self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;
}
